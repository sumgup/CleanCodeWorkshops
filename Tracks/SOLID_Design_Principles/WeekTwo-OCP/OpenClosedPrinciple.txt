The Open/Closed Principle (OCP)
Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification.

=================

When a single change to a program results in a cascade of changes to dependent modules, the
design smells of rigidity. OCP advises us to refactor the system so that further changes of that kind
will not cause more modifications. If OCP is applied well, further changes of that kind are achieved by
adding new code, not by changing old code that already works. This may seem like motherhood and
apple piethe golden, unachievable idealbut in fact, there are some relatively simple and effective
strategies for approaching that ideal.

==========

Modules that conform to OCP have two primary attributes.


1. They are open for extension. This means that the behavior of the module can be extended. As
the requirements of the application change, we can extend the module with new behaviors that
satisfy those changes. In other words, we are able to change what the module does.


2. 
They are closed for modification. Extending the behavior of a module does not result in changes
to the source, or binary, code of the module. The binary executable version of the
modulewhether in a linkable library, a DLL, or a .EXE fileremains untouched.


==============

ENDING

1. 
https://www.agilealliance.org/

2. RoadMap :

1. Workshop on Object oriented design - Using BDD
2. Workshop of Functional programming - 

